// DAZ Studio version 4.10.0.123 filetype DAZ Script
// License: CC Attribution 3.0 Unported (https://creativecommons.org/licenses/by/3.0/)
// 

	var nMaxSelectedNodes = Scene.getNumSelectedNodes();
	if(nMaxSelectedNodes!=1){
		MessageBox.critical( qsTr("Selected Only One Nodes"), qsTr("Critical"), qsTr("&OK") );
		return;
	}

	var s_bShiftPressed = false;

	// If the "Action" global transient is defined, and its the correct type
	if( typeof( Action ) != "undefined" && Action.inherits( "DzScriptAction" ) ){
		// If the current key sequence for the action is not pressed
		if( !App.isKeySequenceDown( Action.shortcut ) ){
			updateModifierKeyState();
		}
	// If the "Action" global transient is not defined
	} else if( typeof( Action ) == "undefined" ) {
		updateModifierKeyState();
	}

	var oFileNameScript = DzFile(getScriptFileName());
	var sFileCSV = String("%1/%2").arg(oFileNameScript.path()).arg("shader.csv");

	var g_aTime = [];
	var g_aImageName = [];

	var bCancel = true;
	var oDlg;
	var g_wEditFileName;
	var g_wCheckCancel;
	var wTextBrowser;

	createDialog();

	if(s_bShiftPressed){
		oDlg.exec();
	}else{
		materialsChange();
	}



/*********************************************************************/
//
/*********************************************************************/
function createDialog(){
	// Create a basic dialog
	oDlg = new DzBasicDialog();

	// Get the wrapped widget for the dialog
	var oDlgWgt = oDlg.getWidget();
	
	// Set the title of the dialog
	oDlg.caption = "Shader Change CSV";
	
	// Strip the space for a settings key
	var sKey = oDlg.caption.replace( / /g, "" ) + "Dlg";
	
	// Set an [unique] object name on the wrapped dialog widget;
	// this is used for recording position and size separately
	// from all other [uniquely named] DzBasicDialog instances
	oDlgWgt.objectName = sKey;

	var oVGBDlg = new DzVGroupBox( oDlg );

	var wHGBFile = new DzHGroupBox( oVGBDlg );
	wHGBFile.title = "CSV File Name";
	g_wEditFileName = new DzLineEdit( wHGBFile );
	g_wEditFileName.minWidth = 200;
	g_wEditFileName.text = sFileCSV;
	var wButtonFile = addButtonOnGroupBox( wHGBFile, "Select File", selectFile );

	g_wCheckCancel = new DzCheckBox( oVGBDlg );
	g_wCheckCancel.text = "Cancel";
	g_wCheckCancel.checked = bCancel;

	var wButtonStart = addButtonOnGroupBox( oVGBDlg, "Start", materialsChange );

	wTextBrowser = new DzTextEdit(oVGBDlg);
	wTextBrowser.readOnly = true;
	var oTextBrowser = wTextBrowser.getWidget();
	wTextBrowser.objectName = String("%1LocalLView").arg( sKey );

	// Add the GroupBox to the dialog
	oDlg.addWidget( oVGBDlg, 0, DzWidget.AlignCenter );

	// Get the minimum size of the dialog
	var sizeHint = oDlgWgt.minimumSizeHint;
	
	// Set the fixed size of the dialog
//	oDlg.setFixedSize( sizeHint.width, sizeHint.height );
	
	// Set the text on the accept button
	oDlg.setAcceptButtonText("Close");
	// Hide the cancel button
	oDlg.showCancelButton( false );
}


/*********************************************************************/
// void : A function for updating the keyboard modifier state
function updateModifierKeyState(){
	// Get the current modifier key state
	var nModifierState = App.modifierKeyState();
	// Update variables that hold modifier key state
	s_bShiftPressed = (nModifierState & 0x02000000) != 0;
}


/*********************************************************************/
//
/*********************************************************************/
function addButtonOnGroupBox( gb, text, func ){
	var wButton = new DzPushButton( gb );
	wButton.text = text;
	connect( wButton, "clicked()", func );
	return( wButton );
}


/*********************************************************************/
//
/*********************************************************************/
function selectFile()
{
	var sFile = FileDialog.doFileDialog(true, "Select a CSV File", oFileNameScript.path(), "CSV Files (*.csv)" );
	if( sFile ){
		g_wEditFileName.text = sFile;
	}
}


/*********************************************************************/
//
/*********************************************************************/
function dateTime( nTime )
{
	var oDateRender = new Date( nTime );
	var sDate = String(" %1.%2 seconds").arg( oDateRender.getSeconds() ).arg( oDateRender.getMilliseconds() ); 
	if( nTime > 60000 ){
		sDate = String(" %1 minutes").arg( oDateRender.getMinutes() ) + sDate;
	}
	if( nTime > 3600000 ){
		sDate = String(" %1 hours").arg( oDateRender.getHours()-9 ) + sDate;
	}
	return sDate;
}


/*********************************************************************/
//
/*********************************************************************/
function appendRenderingTime( nLength )
{
	var nMaxTime = 0;
	var nMinTime = Number.MAX_VALUE;
	var nAverage = 0;
	var nMeanSquare = 0;

	for( var nLine = 0; nLine < nLength; nLine++ ){

		if( nMaxTime < g_aTime[nLine]){
			nMaxTime = g_aTime[nLine];
		}
		if( nMinTime > g_aTime[nLine]){
			nMinTime = g_aTime[nLine];
		}

		nAverage = nAverage + g_aTime[nLine];
		nMeanSquare = nMeanSquare + (g_aTime[nLine] * g_aTime[nLine]);

		wTextBrowser.append( String("%1 %2 rendering time %3 milliseconds").arg( nLine + 1 ).arg( g_aImageName[nLine] ).arg( g_aTime[nLine] ) );
		wTextBrowser.append( dateTime( g_aTime[nLine] ) );

		wTextBrowser.append( "" );
	}

	if(nLength>1){
		nAverage = nAverage / (nLength);
		nMeanSquare = nMeanSquare / (nLength);
		nMeanSquare = nMeanSquare - (nAverage * nAverage);
		nMeanSquare = Math.sqrt(nMeanSquare);

		wTextBrowser.append( String("Max Time = %1 milliseconds").arg( nMaxTime ) );
		wTextBrowser.append( "= " + dateTime( nMaxTime ) );
		wTextBrowser.append( String("Min Time = %1 milliseconds").arg( nMinTime ) );
		wTextBrowser.append( "= " + dateTime( nMinTime ) );
		wTextBrowser.append( String("Average = %1 milliseconds").arg( nAverage ) );
		wTextBrowser.append( "= " + dateTime( nAverage ) );
		wTextBrowser.append( String("Deviation = %1 milliseconds").arg( nMeanSquare ) );
		wTextBrowser.append( "= " + dateTime( nMeanSquare ) );
	}

}


/*********************************************************************/
//
/*********************************************************************/
function materialsChange()
{
	sFileCSV = g_wEditFileName.text;
	bCancel = g_wCheckCancel.checked;

	if(s_bShiftPressed){
		oDlg.close();
		createDialog();
	}

	var oFileCSV = new DzFile(sFileCSV);

	if ( oFileCSV.open( oFileCSV.ReadOnly ) ) {
		var aAllText = oFileCSV.readLines();
	}
	else{
		MessageBox.critical( qsTr("Cannot open shader.csv"), qsTr("Critical"), qsTr("&OK") );
		return;
	}
	oFileCSV.close();

	var oNode = Scene.getSelectedNode(0);
	var oTempObj = oNode.getObject();
	if (oTempObj != null) {
		var oTempShape = oTempObj.getCurrentShape();
	}

	//Render manager
	var oRenderMgr = App.getRenderMgr();

	var oStringHelper = new DzStringHelper();

	var regxPair = new RegExp( "^-?\\d+\\.?\\d*$" );

	g_aTime = new Array( aAllText.length );
	g_aImageName = new Array( aAllText.length );

	for( var nLine = 0; nLine < aAllText.length; nLine++ ){
		var aLineText = oStringHelper.stripCRLF(aAllText[nLine]).split(",");

		for( var nCheck = 0; nCheck < aLineText.length; nCheck++ ){
			if(aLineText[nCheck].length<1){
				wTextBrowser.append( String("Line=%1, Cell=%2, Blank")
									.arg( nLine+1 ).arg( nCheck+1 ) );
				oDlg.exec();
				return;
			}
		}

		var oMaterial = oTempShape.findMaterial(aLineText[1]);

		if(oMaterial != null) {
			var nCell = 2;

			while( nCell < (aLineText.length) ){

				var oProperty = oMaterial.findPropertyByLabel(aLineText[nCell]);
				if(oProperty == null){
					wTextBrowser.append( String("Line=%1, Cell=%2, Property name %3 not find")
										.arg( nLine+1 ).arg( nCell+1 ).arg( aLineText[nCell] ) );
					oDlg.exec();
					return;
				}

				var sProperty = oProperty.className();

				switch( sProperty ){
					case "DzStringProperty":
						oProperty.setValue( aLineText[nCell+1] );
						nCell = nCell + 2;

					case "DzBoolProperty":
						var sLowerCase = aLineText[nCell+1].toLowerCase();
						oProperty.setBoolValue( sLowerCase == "on" );
						nCell = nCell + 2;
						break;

					case "DzEnumProperty":
						if( !(oProperty.setValueFromString(aLineText[nCell+1])) ){
							wTextBrowser.append( String("Line=%1, Cell=%2, DzEnumProperty=%3 is not Item")
												.arg( nLine+1 ).arg( nCell+2 ).arg( aLineText[nCell+1] ) );
							oDlg.exec();
							return;
						}
						nCell = nCell + 2;
						break;

					case "DzIntProperty":
					case "DzFloatProperty":
						if(aLineText[nCell+1].search(regxPair)>-1){
							oProperty.setValue( parseFloat(aLineText[nCell+1]) );
							nCell = nCell + 2;
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzFloatProperty=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+2 ).arg( aLineText[nCell+1] ) );
							oDlg.exec();
							return;
						}
						break;

					case "DzColorProperty":
					case "DzFloatColorProperty":
						if(aLineText[nCell+1].search(regxPair)>-1){
							var nRed = parseFloat(aLineText[nCell+1]);
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzColorProperty Red=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+2 ).arg( aLineText[nCell+1] ) );
							oDlg.exec();
							return;
						}

						if(aLineText[nCell+2].search(regxPair)>-1){
							var nGreen = parseFloat(aLineText[nCell+2]);
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzColorProperty Green=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+3 ).arg( aLineText[nCell+2] ) );
							oDlg.exec();
							return;
						}

						if(aLineText[nCell+3].search(regxPair)>-1){
							var nBlue = parseFloat(aLineText[nCell+3]);
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzColorProperty Blue=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+4 ).arg( aLineText[nCell+3] ) );
							oDlg.exec();
							return;
						}

						oProperty.setFloatColorValue( new DzFloatColor(nRed, nGreen, nBlue) );
						nCell = nCell + 4;
						break;

					default:
						// ...statements
						wTextBrowser.append( String("Line=%1, Cell=%2, Property =%3 is %4 ")
								.arg( nLine+1 ).arg( nCell+1 ).arg( aLineText[nCell] ).arg( sProperty ) );
						oDlg.exec();
						return;
				}
			}

			var oRenderOptions = oRenderMgr.getRenderOptions();
			g_aImageName[nLine] = aLineText[0];

			if( oRenderMgr.getNumRenderDirectories()>0 ){
				var sImgFilename = oRenderMgr.getRenderDirectoryPath(0) + "/" + aLineText[0] + ".png";
			}
			else{
				var sImgFilename = oFileNameScript.path() + "/" + aLineText[0] + ".png";
			}

			oRenderOptions.renderImgFilename = sImgFilename;
			var oDateStart = new Date();
			var bResult = oRenderMgr.doRender();
			var oDateEnd = new Date();
			g_aTime[nLine] = oDateEnd.getTime() - oDateStart.getTime();
			if(!bResult && bCancel){
				var rMessageBox = MessageBox.question( qsTr("Do you want to continue?"), qsTr("Question"), qsTr("&Yes"), qsTr("&No") );
				if( rMessageBox == 1 ){
					wTextBrowser.append( "Cancel" );
					appendRenderingTime( nLine );
					oDlg.exec();
					return;
				}
			}

		}
		else{
			wTextBrowser.append( String("Material %1 not find").arg( aLineText[1] ) );
			oDlg.exec();
			return;
		}

	}

	wTextBrowser.append( "Complete" );
	appendRenderingTime( aAllText.length );
	oDlg.exec();

}