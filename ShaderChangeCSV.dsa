// DAZ Studio version 4.10.0.123 filetype DAZ Script
// License: CC Attribution 3.0 Unported (https://creativecommons.org/licenses/by/3.0/)
// 


	var aProperty = [	["Abbe","DzFloatProperty"],
					["Angle","DzFloatProperty"],
					["Backscattering Anisotropy","DzFloatProperty"],
					["Backscattering Color","DzColorProperty"],
					["Backscattering Glossiness","DzFloatProperty"],
					["Backscattering Roughness","DzFloatProperty"],
					["Backscattering Weight","DzFloatProperty"],
					["Base Bump","DzFloatProperty"],
					["Base Color","DzColorProperty"],
					["Base Color Effect","DzEnumProperty"],
					["Base Mixing","DzEnumProperty"],
					["Base Thin Film","DzFloatProperty"],
					["Base Thin Film IOR","DzFloatProperty"],
					["BSDF Type","DzEnumProperty"],
					["Cutout Opacity","DzFloatProperty"],
					["Diffuse Overlay Color","DzColorProperty"],
					["Diffuse Overlay Color Effect","DzEnumProperty"],
					["Diffuse Overlay Roughness","DzFloatProperty"],
					["Diffuse Overlay Weight","DzFloatProperty"],
					["Diffuse Overlay Weight Squared","DzBoolProperty"],
					["Diffuse Roughness","DzFloatProperty"],
					["Diffuse Strength","DzFloatProperty"],
					["Diffuse Weight","DzFloatProperty"],
					["Displacement Strength","DzFloatProperty"],
					["Dual Lobe Specular Ratio","DzFloatProperty"],
					["Dual Lobe Specular Reflectivity","DzFloatProperty"],
					["Dual Lobe Specular Weight","DzFloatProperty"],
					["Emission Color","DzColorProperty"],
					["Emission Temperature (K)","DzFloatProperty"],
					["Follow Blend","DzFloatProperty"],
					["Glossiness","DzFloatProperty"],
					["Glossiness Squared","DzBoolProperty"],
					["Glossy Anisotropy","DzFloatProperty"],
					["Glossy Anisotropy Rotations","DzFloatProperty"],
					["Glossy Color","DzColorProperty"],
					["Glossy Color Effect","DzEnumProperty"],
					["Glossy Layered Weight","DzFloatProperty"],
					["Glossy Reflectivity","DzFloatProperty"],
					["Glossy Roughness","DzFloatProperty"],
					["Glossy Specular","DzColorProperty"],
					["Glossy Weight","DzFloatProperty"],
					["Horizontal Offset","DzFloatProperty"],
					["Horizontal Tiles","DzFloatProperty"],
					["Invert Transmission Normal","DzBoolProperty"],
					["Line End Width (mm)","DzFloatProperty"],
					["Line Preview Color","DzColorProperty"],
					["Line Start Width (mm)","DzFloatProperty"],
					["Line UV Width","DzFloatProperty"],
					["Luminance","DzFloatProperty"],
					["Luminance Units","DzEnumProperty"],
					["Luminous Efficacy (lm/W)","DzFloatProperty"],
					["Material ID","DzColorProperty"],
					["Maximum Displacement","DzFloatProperty"],
					["Metallic Flakes Color","DzColorProperty"],
					["Metallic Flakes Color Effect","DzEnumProperty"],
					["Metallic Flakes Density","DzFloatProperty"],
					["Metallic Flakes Glossiness","DzFloatProperty"],
					["Metallic Flakes Roughness","DzFloatProperty"],
					["Metallic Flakes Size","DzFloatProperty"],
					["Metallic Flakes Strength","DzFloatProperty"],
					["Metallic Flakes Thin Film","DzFloatProperty"],
					["Metallic Flakes Thin Film IOR","DzFloatProperty"],
					["Metallic Flakes Weight","DzFloatProperty"],
					["Metallicity","DzFloatProperty"],
					["Minimum Displacement","DzFloatProperty"],
					["Normal Map","DzFloatProperty"],
					["Propagate Priority","DzBoolProperty"],
					["Reflectivity","DzFloatProperty"],
					["Refraction Color","DzColorProperty"],
					["Refraction Glossiness","DzFloatProperty"],
					["Refraction Index","DzFloatProperty"],
					["Refraction Roughness","DzFloatProperty"],
					["Refraction Weight","DzFloatProperty"],
					["Render Priority","DzEnumProperty"],
					["Roughness Squared","DzBoolProperty"],
					["Round Corners Across Materials","DzBoolProperty"],
					["Round Corners Radius","DzFloatProperty"],
					["Round Corners Roundness","DzFloatProperty"],
					["Scattering Measurement Distance","DzFloatProperty"],
					["Share Glossy Inputs","DzBoolProperty"],
					["Smooth","DzBoolProperty"],
					["Specular Lobe 1 Glossiness","DzFloatProperty"],
					["Specular Lobe 1 Roughness","DzFloatProperty"],
					["Specular Lobe 2 Glossiness","DzFloatProperty"],
					["Specular Lobe 2 Roughness","DzFloatProperty"],
					["SSS Amount","DzFloatProperty"],
					["SSS Color","DzColorProperty"],
					["SSS Direction","DzFloatProperty"],
					["SSS Mode","DzEnumProperty"],
					["SSS Reflectance Tint","DzColorProperty"],
					["Thin Walled","DzBoolProperty"],
					["Top Coat Anisotropy","DzFloatProperty"],
					["Top Coat Bump","DzFloatProperty"],
					["Top Coat Bump Mode","DzEnumProperty"],
					["Top Coat Color","DzColorProperty"],
					["Top Coat Color Effect","DzEnumProperty"],
					["Top Coat Curve 0","DzFloatProperty"],
					["Top Coat Curve 90","DzFloatProperty"],
					["Top Coat Curve Exponent","DzFloatProperty"],
					["Top Coat Glossiness","DzFloatProperty"],
					["Top Coat IOR","DzFloatProperty"],
					["Top Coat Layering Mode","DzEnumProperty"],
					["Top Coat Rotations","DzFloatProperty"],
					["Top Coat Roughness","DzFloatProperty"],
					["Top Coat Thin Film","DzFloatProperty"],
					["Top Coat Thin Film IOR","DzFloatProperty"],
					["Top Coat Weight","DzFloatProperty"],
					["Translucency Color","DzColorProperty"],
					["Translucency Weight","DzFloatProperty"],
					["Transmitted Color","DzColorProperty"],
					["Transmitted Measurement Distance","DzFloatProperty"],
					["Two Sided Light","DzBoolProperty"],
					["UV Set","DzEnumProperty"],
					["Vertical Offset","DzFloatProperty"],
					["Vertical Tiles","DzFloatProperty"] ];


	var nMaxSelectedNodes = Scene.getNumSelectedNodes();
	if(nMaxSelectedNodes!=1){
		MessageBox.critical( qsTr("Selected Only One Nodes"), qsTr("Critical"), qsTr("&OK") );
		return;
	}


	var oFileNameScript = DzFile(getScriptFileName());
	var sFileCSV = String("%1/%2").arg(oFileNameScript.path()).arg("shader.csv");
	var oFileCSV = new DzFile(sFileCSV);

	if ( oFileCSV.open( oFileCSV.ReadOnly ) ) {
		var aAllText = oFileCSV.readLines();
	}
	else{
		MessageBox.critical( qsTr("Cannot open shader.csv"), qsTr("Critical"), qsTr("&OK") );
		return;
	}
	oFileCSV.close();


	// Create a basic dialog
	var oDlg = new DzBasicDialog();

	// Get the wrapped widget for the dialog
	var oDlgWgt = oDlg.getWidget();
	
	// Set the title of the dialog
	oDlg.caption = "Shader Value";
	
	// Strip the space for a settings key
	var sKey = oDlg.caption.replace( / /g, "" ) + "Dlg";
	
	// Set an [unique] object name on the wrapped dialog widget;
	// this is used for recording position and size separately
	// from all other [uniquely named] DzBasicDialog instances
	oDlgWgt.objectName = sKey;

	var oVGBDlg = new DzVGroupBox( oDlg );

	var wTextBrowser = new DzTextEdit(oVGBDlg);
	wTextBrowser.readOnly = true;
	var oTextBrowser = wTextBrowser.getWidget();
	wTextBrowser.objectName = String("%1LocalLView").arg( sKey );

	// Add the GroupBox to the dialog
	oDlg.addWidget( oVGBDlg, 0, DzWidget.AlignCenter );

	// Get the minimum size of the dialog
	var sizeHint = oDlgWgt.minimumSizeHint;
	
	// Set the fixed size of the dialog
//	oDlg.setFixedSize( sizeHint.width, sizeHint.height );
	
	// Set the text on the accept button
	oDlg.setAcceptButtonText("Close");
	// Hide the cancel button
	oDlg.showCancelButton( false );


	var oNode = Scene.getSelectedNode(0);
	var oTempObj = oNode.getObject();
	if (oTempObj != null) {
		var oTempShape = oTempObj.getCurrentShape();
	}

	//Render manager
	var oRenderMgr = App.getRenderMgr();

	var oStringHelper = new DzStringHelper();

	var regxPair = new RegExp( "^-?\\d+\\.?\\d*$" );

	var aTime = new Array( aAllText.length );
	var aImageName = new Array( aAllText.length );

	for( var nLine = 0; nLine < aAllText.length; nLine++ ){
		var aLineText = oStringHelper.stripCRLF(aAllText[nLine]).split(",");

		for( var nCheck = 0; nCheck < aLineText.length; nCheck++ ){
			if(aLineText[nCheck].length<1){
				wTextBrowser.append( String("Line=%1, Cell=%2, Blank")
									.arg( nLine+1 ).arg( nCheck+1 ) );
				oDlg.exec();
				return;
			}
		}

		var oMaterial = oTempShape.findMaterial(aLineText[1]);

		if(oMaterial != null) {
			var nCell = 2;

			while( nCell < (aLineText.length) ){

				var nPropertyKind = searchPropertyKind(aLineText[nCell]);
				if(nPropertyKind<0){
					wTextBrowser.append( String("Line=%1, Cell=%2, Property name %3 not find")
										.arg( nLine+1 ).arg( nCell+1 ).arg( aLineText[nCell] ) );
					oDlg.exec();
					return;
				}

				switch( aProperty[nPropertyKind][1] ){
					case "DzBoolProperty":
						var oBoolProperty = oMaterial.findPropertyByLabel(aLineText[nCell]);
						var sLowerCase = aLineText[nCell+1].toLowerCase();
						oBoolProperty.setBoolValue( sLowerCase == "on" );
						nCell = nCell + 2;
						break;

					case "DzEnumProperty":
						var oEnumProperty = oMaterial.findPropertyByLabel(aLineText[nCell]);
						if( !(oEnumProperty.setValueFromString(aLineText[nCell+1])) ){
							wTextBrowser.append( String("Line=%1, Cell=%2, DzEnumProperty=%3 is not Item")
												.arg( nLine+1 ).arg( nCell+1 ).arg( aLineText[nCell+1] ) );
							oDlg.exec();
							return;
						}
						nCell = nCell + 2;
						break;

					case "DzFloatProperty":
						if(aLineText[nCell+1].search(regxPair)>-1){
							var oFloatProperty = oMaterial.findPropertyByLabel(aLineText[nCell]);
							oFloatProperty.setValue( parseFloat(aLineText[nCell+1]) );
							nCell = nCell + 2;
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzFloatProperty=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+2 ).arg( aLineText[nCell+1] ) );
							oDlg.exec();
							return;
						}
						break;

					case "DzColorProperty":
						if(aLineText[nCell+1].search(regxPair)>-1){
							var nRed = parseInt(aLineText[nCell+1]);
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzColorProperty Red=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+2 ).arg( aLineText[nCell+1] ) );
							oDlg.exec();
							return;
						}

						if(aLineText[nCell+2].search(regxPair)>-1){
							var nGreen = parseInt(aLineText[nCell+2]);
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzColorProperty Green=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+3 ).arg( aLineText[nCell+2] ) );
							oDlg.exec();
							return;
						}

						if(aLineText[nCell+3].search(regxPair)>-1){
							var nBlue = parseInt(aLineText[nCell+3]);
						}
						else{
							wTextBrowser.append( String("Line=%1, Cell=%2, DzColorProperty Blue=%3 is not numeric")
								.arg( nLine+1 ).arg( nCell+4 ).arg( aLineText[nCell+3] ) );
							oDlg.exec();
							return;
						}

						var oColorProperty = oMaterial.findPropertyByLabel(aLineText[nCell]);
						oColorProperty.setColorValue( new Color(nRed, nGreen, nBlue) );
						nCell = nCell + 4;
						break;

					default:
						// ...statements
						break;
				}
			}

			var oRenderOptions = oRenderMgr.getRenderOptions();
			aImageName[nLine] = aLineText[0];

			if( oRenderMgr.getNumRenderDirectories()>0 ){
				var sImgFilename = oRenderMgr.getRenderDirectoryPath(0) + "/" + aLineText[0] + ".png";
			}
			else{
				var sImgFilename = oFileNameScript.path() + "/" + aLineText[0] + ".png";
			}

			oRenderOptions.renderImgFilename = sImgFilename;
			var oDateStart = new Date();
			var bResult = oRenderMgr.doRender();
			var oDateEnd = new Date();
			aTime[nLine] = oDateEnd.getTime() - oDateStart.getTime();
		}
		else{
			wTextBrowser.append( String("Material %1 not find").arg( aLineText[1] ) );
			oDlg.exec();
			return;
		}

	}

	var nMaxTime = 0;
	var nMinTime = Number.MAX_VALUE;
	var nAverage = 0;
	var nMeanSquare = 0;

	wTextBrowser.append( "Complete" );
	for( var nLine = 0; nLine < aAllText.length; nLine++ ){

		if( nMaxTime < aTime[nLine]){
			nMaxTime = aTime[nLine];
		}
		if( nMinTime > aTime[nLine]){
			nMinTime = aTime[nLine];
		}

		nAverage = nAverage + aTime[nLine];
		nMeanSquare = nMeanSquare + (aTime[nLine] * aTime[nLine]);

		wTextBrowser.append( String("%1 %2 rendering time %3 milliseconds").arg( nLine + 1 ).arg( aImageName[nLine] ).arg( aTime[nLine] ) );
		wTextBrowser.append( dateTime( aTime[nLine] ) );

		wTextBrowser.append( "" );
	}

	nAverage = nAverage / (aAllText.length);
	nMeanSquare = nMeanSquare / (aAllText.length);
	nMeanSquare = nMeanSquare - (nAverage * nAverage);
	nMeanSquare = Math.sqrt(nMeanSquare);

	wTextBrowser.append( String("Max Time = %1 milliseconds").arg( nMaxTime ) );
	wTextBrowser.append( "= " + dateTime( nMaxTime ) );
	wTextBrowser.append( String("Min Time = %1 milliseconds").arg( nMinTime ) );
	wTextBrowser.append( "= " + dateTime( nMinTime ) );
	wTextBrowser.append( String("Average = %1 milliseconds").arg( nAverage ) );
	wTextBrowser.append( "= " + dateTime( nAverage ) );
	wTextBrowser.append( String("Deviation = %1 milliseconds").arg( nMeanSquare ) );
	wTextBrowser.append( "= " + dateTime( nMeanSquare ) );

	oDlg.exec();


/*********************************************************************/
//
/*********************************************************************/
function searchPropertyKind(sNameProperty)
{
	for( var nLoop = 0; nLoop < aProperty.length; nLoop++ ){
		if(aProperty[nLoop][0] == sNameProperty){
			return nLoop;
		}
	}
	return -1;
}


/*********************************************************************/
//
/*********************************************************************/
function dateTime( nTime )
{
	var oDateRender = new Date( nTime );
	var sDate = String(" %1.%2 seconds").arg( oDateRender.getSeconds() ).arg( oDateRender.getMilliseconds() ); 
	if( nTime > 60000 ){
		sDate = String(" %1 minutes").arg( oDateRender.getMinutes() ) + sDate;
	}
	if( nTime > 3600000 ){
		sDate = String(" %1 hours").arg( oDateRender.getHours()-9 ) + sDate;
	}
	return sDate;
}
